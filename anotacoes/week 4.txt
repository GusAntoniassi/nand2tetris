Linguagens de Máquina: Visão geral
	Modelos teóricos de Alan Turing
		- Formalizou a noção de um computador
		- Define um modelo teórico - Máquina de Turing
		- Tenta capturar a essência do que pode ser computado
		- Universal Turing Machine: Máquina que consegue agir como qualquer máquina
	Modelo Von Neumann
		- Prática
		- Montou a primeira arquitetura de uma máquina de computação geral
		- Software dentro do hardware
		- Softwares diferentes agem de forma diferente
		- Input -> Memória (Programa / Dados) <-> CPU -> Saída
		- Software muda, computador faz coisas diferentes
	Programa
		Sequência de instruções, codificadas em binário
		Processador roda instrução por instrução, executando-as
	
	Como especificar as instruções?
		- O que uma instrução diz ao computador pra fazer?
	Como saber qual instrução realizar em um determinado momento? Deve ser possível ir de uma instrução à outra
	Como dizer ao software onde estão os valores a serem computados e onde armazenar o resultado
	Facilitar a programação em linguagem de máquina
		- Instruções são sempre sequências de bits => Converter em palavras
		- 0100010 0011 0010
		-   ADD    R3   R2
		- Interpretação 1: Forma sintática não existe, é apenas um "apelido" para as instruções
		- Interpretação 2: Humanos vão poder escrever instruções em linguagem de máquina, e terão um "Assembler"
		para convertê-las em forma binária
		Símbolos
			- Acessar posições de memória
			- ADD 1, Mem[129]
			- Assembler vai traduzir as variáveis: index -> Mem[129]
			- Nome de variáveis
			- Assembler que vai alocar a posição
	
Linguagens de Máquina: Elementos
	Interface entre hardware e software
	Especificar quais operações o hardware vai fazer, de onde vai tirar a memória e tal
	Geralmente quase correspondente À arquitetura do hardware (mas não necessariamente)
	Troca entre custo e performance (custo do silicone vs tempo p/ completar instrução)
	Operações de máquina:
		- Aritméticas
		- Lógicas
		- Controle de fluxo (goto, if)
	Algumas operações podem ser retiradas (divisão, etc)
		- Tipos de dados também (8-bit vs 64-bit, decimais)
	Endereços de memória
		- Acessar memória é 'caro' (enderçeos longos, transferência à CPU)
		- Hierarquia de memória (Vonn Neuman)
			- CPU -> Registradores -> Cache -> Memória principal -> disco
	Registradores
		- Linguiagem de máquina
		- Poucos bits, muito rápidos
		- Registradores de dados
			Add r1, r2
		- Armazenar endereços de memória
			Store R1, @A
	Formas de endereçamento
		- Registradores: Add r1, r2 -- R2 = R2 + R1
		- Direto: Add r1, M[200] -- Memória[a] = Memória[a] + r1
		- Indireto: Add r1, @a -- Memória[a] = Memória[a] + r1
		- Imediato: Add 73, R1 -- R1 = R1 + 73
	Input/Output
		acessar os dispositivos de IO: Conectar os registradores desses dispositivos como parte da memória
		Movimento do mouse é armazenado em um registrador, que será acessado pelo computador na memória
	Controle de fluxo
		Geralmente a CPU executa em sequência
		As vezes é necessário jump
			101 LOAD r1, 0
			102 ADD 1, r1
			103 JUMP 102
		Dar nome aos lugares importantes
			Load r1, 0
			loop: Add 1, r1
			jump loop
			
		As vezes é preciso dar jump condicional
			JGT = Jump (if) Greater Than
			JGT R1, 0, cont // Jump if r1 > 0
			Subtract R1, 0, R1
			cont: (...)
				// Fazer algo com R1 positivo

Linguagem de máquina do HACK
	Hardware:
		16-bit
		Memória de dados (RAM) - 16-bit registers
		Mmeória de instrução (ROM) - 16 bit registers
		CPU - Realiza operações de 16 bits
		Buses de instrução / dados / endereços
		Registradores:
			A register - Dados ou endereço
			M register - Endereço de memória selecionado - Representa o (valor dentro do) registrador endereçado por A
			D register - Armazena um valor de 16 bits (dados)
	Software:
		Linguagem de máquina
		Instruções A 16-bit
			@value
				- Value é uma constante decimal não negativa
				- Ou um símbolo referenciando à constnate
				@21: Seta o registrador A para 21
					- RAM[A] é o registrador selecionado
					- M vira o registrador selecionado por A
				EXEMPLO::::
				// Setar RAM[100] como -1
				@100 // A=100
				M = -1 // RAM[100] = -1
		Instruções C 16-bit
			Cavalo de trabalho
			Sintaxe: dest = comp ; jump (dest e jump são opcionais)
			- comp = uma computação a ser realizada
				- Pode ser qualquer computação entre
				0, 1, -1, 
				D, !D, -D, D+1, D-1, D+A, D-A, A-D, D&A, D|A
				A, !A, -A, A+1, A-1, 	  
				M, !M, -M, M+1, M-1, D+M, D-M, M-D, D&M, D|M
			- dest = onde armazenar
				- Pode ser:
				null, M, D, MD, A, AM, AD, AMD
				(M se refere a RAM[A])
			- jump = se vai pular pra outra instrução
				- 8 condições possíveis
				- Comparam a computação a 0 sempre
				- If (comp jump 0) is true, execute ROM[A]
				- Jump é feito para o valor armazenado no registrador A
				null: 
				JGT: Greater Than - > 0
				JEQ: Equal - == 0
				JGE: Greater Than or Equal - >= 0
				JLT: Lesser Than - < 0
				JNE: Not Equal - != 0
				JLE: Lesser Than or Equal - <= 0
				JMP: JUMP (usagem: 0; JMP)
		Exemplos da sintaxe:
			- Setar o registrador D como -1
			D=-1
			- Setar a RAM[300] para o valor do registrador D - 1
			@300 // A=300
			M=D-1
			- If (D-1==0) jump pra instrução em ROM[56]
			@56
			D-1; JEQ
	Fluxo de controle	
		- ROM é carregada com um programa
		- Botão de RESET é pressionado
		- Programa roda
Especificação da Hack Language
	Sintaxe em binário
		- A instruction (op code 0)
		@value = 0value (value é um número de 15 bits)
		- C instruction (op code 1)
		1 		 1 1 		 a c1 c2 c3 c4 c5 c6		 d1 d2 d3			j1 j2 j3
		op code	 não usados  comp bits					 dest				jump
		
		comp:
			a=0 -> usa o A
			a=1 -> usa o M
			
			0   |     | c1 | c2 | c3 | c4 | c5 | c6 |
			1   |     | 1  | 0  | 1  | 0  | 1  | 0  |
			-1  |     | 1  | 1  | 1  | 1  | 1  | 1  |
			D   |     | 1  | 1  | 1  | 0  | 1  | 0  |
			A   |   M | 0  | 0  | 1  | 1  | 0  | 0  |
			!D  |  !M | 1  | 1  | 0  | 0  | 0  | 0  |
			!A  |  -M | 0  | 0  | 1  | 1  | 0  | 1  |
			-D  |     | 1  | 1  | 0  | 0  | 0  | 1  |
			-A  |     | 1  | 1  | 0  | 0  | 1  | 1  |
			D+1 |     | 0  | 1  | 1  | 1  | 1  | 1  |
			A+1 | M+1 | 1  | 1  | 0  | 1  | 1  | 1  |
			D-1 |     | 0  | 0  | 1  | 1  | 1  | 0  |
			A-1 | M-1 | 1  | 1  | 0  | 0  | 1  | 0  |
			D+A | D+M | 0  | 0  | 0  | 0  | 1  | 0  |
			D-A | D-M | 0  | 1  | 0  | 0  | 1  | 1  |
			A-D | M-D | 0  | 0  | 0  | 1  | 1  | 1  |
			D&A | D&M | 0  | 0  | 0  | 0  | 0  | 0  |
			D|A | D|M | 0  | 1  | 0  | 1  | 0  | 1  |
			----+----
			a=0 | a=1 
		dest:
		| dest | d1 d2 d3 | effect: the value is stored in: 
		| null | 0  0  0  | Valor não é armazenado
		| M    | 0  0  1  | RAM[A]
		| D    | 0  1  0  | D register
		| MD   | 0  1  1  | RAM[A] e D Register
		| A    | 1  0  0  | A register
		| AM   | 1  0  1  | A register e RAM[A]
		| AD   | 1  1  0  | A register e D registre
		| AMD  | 1  1  1  | A register, RAM[A] e D register
		
		jmp:
		| null | 0  0  0  |
		| JGT  | 0  0  1  | 
		| JEQ  | 0  1  0  | 
		| JGE  | 0  1  1  | 
		| JLT  | 1  0  0  | 
		| JNE  | 1  0  1  | 
		| JLE  | 1  1  0  | 
		| JMP  | 1  1  1  | 
		 
Input/Output
	Manipular a tela:
		Screen Memory Map
			- Área designada parte da RAM
			- Monitor é continuamente atualizado com o contéudo do mapa de memória
			- Saída é realizada manipulando os bits no mapa de memória
			Hack Computer:
				- Tabela de 256 linhas e 512 colunas
				- Em cada interseção das linhas e colunas tem um pixel
				- Pixel pode estar ligado ou desligado (preto e branco)
				- Mapa de memória é uma sequência de valores de 16 bits (palavras)
					- 8 mil palavras
					- Memória só é acessada pelos 16 bits inteiros, não separa
					- Primeiras 32 palavras correspondem à primeira linha
					- Fórmula: row * 32 + col / 16
					- Chip chamado Screen
						- 8K
						- Abstração
						- Quando construir o computador a screen vai ser parte da memória
					- word = Screen[32*row + col/16]
					- OU word = RAM[16384 + 32*row + col/16]
					- Pra mudar os pixels: setar o (col % 16)º bit da palavra pra 0 ou 1
	Manipular o teclado
		Keyboard Memory Map
		- Um único registrador de 16 bits 
		- Keycode - valor previmente combinado
		- cada tecla possui um scan key 
		- Para verificar qual tecla está sendo pressionada: ler o registrador Keyboard
			- No hack computer fica na posição RAM[24576]
		- read only
		
Hack Programming (pt 1)
	- Assembler: converte o programa 
	- CPU emulator