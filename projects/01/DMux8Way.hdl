// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    /*
        a: {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000 - dmux1
        b: {0, in, 0, 0, 0, 0, 0, 0} if sel == 001 - dmux2
        c: {0, 0, in, 0, 0, 0, 0, 0} if sel == 010 - dmux1
        d: {0, 0, 0, in, 0, 0, 0, 0} if sel == 011 - dmux2
        e: {0, 0, 0, 0, in, 0, 0, 0} if sel == 100 - dmux3
        f: {0, 0, 0, 0, 0, in, 0, 0} if sel == 101 - dmux4
        g: {0, 0, 0, 0, 0, 0, in, 0} if sel == 110 - dmux3
        h: {0, 0, 0, 0, 0, 0, 0, in} if sel == 111 - dmux4
    
    
        1ยบ DMux: vai alternar entre o primeiro bit 0 ou 1 - out0 e out1
        out0 vai abranger:
            a, c, e, g
        out1 vai abranger:
            b, d, f, h
        2ยบ DMux: vai alternar entre o out0 e o segundo bit 0 ou 1 - out00 e out01
        out00 vai abranger:
            a, e
        out02 vai abranger:
            b, f
        3ยบ Dmux: vai alternar entre o out0 e o segundo bit 0 ou 1 - out10 e out11
        out10 vai abranger:
            c, g
        out11 vai abranger:
            d, h

    */

    DMux(in=in, sel=sel[0], a=out0, b=out1);
    
    DMux(in=out0, sel=sel[1], a=out00, b=out01);
    DMux(in=out1, sel=sel[1], a=out10, b=out11);

    DMux(in=out00, sel=sel[2], a=a, b=e);
    DMux(in=out01, sel=sel[2], a=b, b=f);
    DMux(in=out10, sel=sel[2], a=c, b=g);
    DMux(in=out11, sel=sel[2], a=d, b=h);
    
}