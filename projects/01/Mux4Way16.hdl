// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    /* 
        Teremos que comparar os pares que possuem um bit em comum e um bit diferente, para fazer a seleção
        Os pares poderiam ser:
        a^b, c^d ou a^c, b^d. Qualquer um dá certo.
        Na comparação, temos que usar o bit de seleção que varia entre os pares
        - No caso do a^b, c^d, o bit seria sel[0]
        - No caso do a^c, b^d, o bit seria sel[1]

        Depois de fazer o mux dos 4, temos que usar o bit que restou pra selecionar um dos dois
    */
    
    Mux16(a=a, b=c, sel=sel[1], out=mux1);
    Mux16(a=b, b=d, sel=sel[1], out=mux2);
    Mux16(a=mux1, b=mux2, sel=sel[0], out=out);

    /*
        Equivalente:
        Mux16(a=a, b=b, sel=sel[0], out=mux1);
        Mux16(a=c, b=d, sel=sel[0], out=mux2);
        Mux16(a=mux1, b=mux2, sel=sel[1], out=out);
    */
}