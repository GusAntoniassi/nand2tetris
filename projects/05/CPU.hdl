// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //===============================
    // A-Register
    //===============================
        // Fazer um Mux16 com a instrução e a saída da ALU
        // O sel será o primeiro bit ([15]) da instrução
        // O load do ARegister será o primeiro bit de destino (posição 5)

        Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=inputARegister);
        ARegister(in=inputARegister, load=instruction[5], out=outARegister);


    //===============================
    // D-Register
    //===============================
        // D register será alimentado com a saída da ALU
        // O load será determinado pelo 

    DRegister(in=aluOutput, load=instruction[4], out=outDRegister);
    
    //===============================
    // M-Register
    //===============================
        // Fazer um Mux16 com a saída do A-Register e o inM
        // O sel será o bit "a" dos comp bits (o primeiro) - equivalente à posição 12

    Mux16(a=outARegister, b=inM, sel=instruction[12], out=outMRegister);

    //===============================
    // ALU
    //===============================
        // Entrada da ALU é igual aos comp bits ([6..11])
    ALU(
        x=outDRegister,
        y=outMRegister,
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6],
        out=aluOutput,
        zr=zr,
        ng=ng

        // Já colocar a saída para alguns JUMPs
        zr=jEQ
        ng=jLT
    )

    //===============================
    // JUMPS / PC
    //===============================
        // Olhar nos 3 últimos bits para saber qual jump será
		| null | 0  0  0 |
		| JGT  | 0  0  1 | 
		| JEQ  | 0  1  0 | 
		| JGE  | 0  1  1 | 
		| JLT  | 1  0  0 | 
		| JNE  | 1  0  1 | 
		| JLE  | 1  1  0 | 
		| JMP  | 1  1  1 | 

    // Olhar nos control bits da ALU
    // ZR e NG
    // JGT = !ng && !zr     •
    // JEQ = zr             •
    // JGE = !ng            •
    // JLT = ng             •
    // JNE = !zr            •
    // JLE = ng || zr       •
    // JMP = 1              •

    Not(in=zr, out=notZr, out=jNE);
    Not(in=ng, out=notNg, out=jGE);
    Or(a=ng, b=zr, out=jLE);
    And(a=notNg, b=notZr, out=jGT);

    // Decidir o que fazer aqui, preciso fazer algo tipo
    // um Mux8Way pra selecionar o bit que eu quero

    DMux8Way(
        in=true, 
        sel=instruction[0..2], 
        a=false, 
        b=, 
        c=, 
        d=, 
        e=, 
        f=, 
        g=, 
        h=);

    Not(in=loadFinal, out=notLoadFinal);
    PC(in=outARegister, load=loadFinal, inc=notLoadFinal, reset=reset, out= );

    // A verificar: A ordem dos dest bits está correta?
    // d1 = A? | d2=D(ok) | d3=writeM?
}