// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //===============================
    // A-Register
    //===============================
        // Fazer um Mux16 com a instrução e a saída da ALU
        // O sel será o primeiro bit ([15]) da instrução -- op code
        // O load do ARegister será quando
            // op-code 0 (A-instruction) OU d1 = 1
            // !op-code (instruction[15]) || d1 (instruction[5])
        
        Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=inputARegister);
        Not(in=instruction[15], out=isAInstruction);
        Or(a=isAInstruction, b=instruction[5], out=loadA);
        ARegister(in=inputARegister, load=loadA, out=outARegister, out[0..14]=addressM);


    //===============================
    // D-Register
    //===============================
        // D register será alimentado com a saída da ALU
        // O load será determinado pelo d2 (instruction[4]) && op-code (apenas se for uma C-instruction)
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluOutput, load=loadD, out=outDRegister);
    
    //===============================
    // M-Register
    //===============================
        // Fazer um Mux16 com a saída do A-Register e o inM
        // O sel será o bit "a" dos comp bits (o primeiro) - equivalente à posição 12

    Mux16(a=outARegister, b=inM, sel=instruction[12], out=outMRegister);

    //===============================
    // ALU
    //===============================
        // Entrada da ALU é igual aos comp bits ([6..11])
    ALU(
        x=outDRegister,
        y=outMRegister,
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6],
        out=aluOutput,
        out=outM,
        zr=zr,
        ng=ng,

        // Já colocar a saída para alguns JUMPs
        zr=jEQ,
        ng=jLT
    );

    //===============================
    // JUMPS / PC
    //===============================
    //  // Olhar nos 3 últimos bits para saber qual jump será
	//	| null | 0  0  0 |
	//	| JGT  | 0  0  1 | 
	//	| JEQ  | 0  1  0 | 
	//	| JGE  | 0  1  1 | 
	//	| JLT  | 1  0  0 | 
	//	| JNE  | 1  0  1 | 
	//	| JLE  | 1  1  0 | 
	//	| JMP  | 1  1  1 | 

    // Olhar nos control bits da ALU
    // ZR e NG
    // JGT = !ng && !zr     •
    // JEQ = zr             •
    // JGE = !ng            •
    // JLT = ng             •
    // JNE = !zr            •
    // JLE = ng || zr       •
    // JMP = 1              •

    Not(in=zr, out=notZr, out=jNE);
    Not(in=ng, out=notNg, out=jGE);
    Or(a=ng, b=zr, out=jLE);
    And(a=notNg, b=notZr, out=jGT);

    // Mux8Way
    Mux(a=false, b=jGT, sel=instruction[0], out=muxAB);
    Mux(a=jEQ, b=jGE, sel=instruction[0], out=muxCD);
    Mux(a=jLT, b=jNE, sel=instruction[0], out=muxEF);
    Mux(a=jLE, b=true, sel=instruction[0], out=muxGH);

    Mux(a=muxAB, b=muxCD, sel=instruction[1], out=muxABCD);
    Mux(a=muxEF, b=muxGH, sel=instruction[1], out=muxEFGH);

    Mux(a=muxABCD, b=muxEFGH, sel=instruction[2], out=outMuxJump);

    // O jump será realizado apenas se for uma C-instruction
    And(a=instruction[15], b=outMuxJump, out=loadFinal);

    Not(in=loadFinal, out=notLoadFinal);
    PC(in=outARegister, load=loadFinal, inc=notLoadFinal, reset=reset, out[0..14]=pc);

    // pro writeM ser 1, o op code (instruction[15]) tem que ser 1 (indica C-instruction)
    // e o d3 (instruction[3]) tem que ser 1 (indica que vai usar o M)
    And(a=instruction[15], b=instruction[3], out=writeM);
}